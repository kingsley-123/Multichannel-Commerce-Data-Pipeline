# Modern Docker Compose for Fashion Data Pipeline
# Medallion Architecture: Bronze (MinIO) → Silver (PostgreSQL) → Gold (ClickHouse)

# Common environment variables for the data pipeline
x-airflow-common: &airflow-common
  build:
    context: .
    dockerfile: Dockerfile.airflow
  environment: &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${AIRFLOW_DB_USER:-airflow}:${AIRFLOW_DB_PASSWORD:-airflow}@postgres/${AIRFLOW_DB_NAME:-airflow}
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://${AIRFLOW_DB_USER:-airflow}:${AIRFLOW_DB_PASSWORD:-airflow}@postgres/${AIRFLOW_DB_NAME:-airflow}
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: '${AIRFLOW_FERNET_KEY:-81HqDtbqAywKSOumSha3BhWNOdQ26slT6K0YaZeZyPs=}'
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__WEBSERVER__SECRET_KEY: '${AIRFLOW_SECRET_KEY:-airflow-secret-key}'
    AIRFLOW__CORE__PARALLELISM: 32
    AIRFLOW__CORE__DAG_FILE_PROCESSOR_TIMEOUT: 600
    AIRFLOW__WEBSERVER__WORKERS: 4
    PYTHONPATH: /opt/scripts:/opt/airflow
    # UK Timezone Configuration
    AIRFLOW__CORE__DEFAULT_TIMEZONE: Europe/London
    TZ: Europe/London
    # Silver Layer Database Connection (PostgreSQL)
    SILVER_DB_HOST: data-postgres
    SILVER_DB_PORT: 5432
    SILVER_DB_NAME: ${SILVER_DB_NAME:-fashion_silver}
    SILVER_DB_USER: ${SILVER_DB_USER:-silver_user}
    SILVER_DB_PASSWORD: ${SILVER_DB_PASSWORD:-silver_pass_2024}
    # Bronze Layer Storage (MinIO)
    BRONZE_MINIO_HOST: minio
    BRONZE_MINIO_PORT: 9000
    BRONZE_MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY:-bronze_access_key}
    BRONZE_MINIO_SECRET_KEY: ${MINIO_SECRET_KEY:-bronze_secret_key_2024}
    # Gold Layer Analytics (ClickHouse)
    GOLD_CLICKHOUSE_HOST: clickhouse
    GOLD_CLICKHOUSE_PORT: 8123
    GOLD_CLICKHOUSE_USER: ${CLICKHOUSE_USER:-gold_user}
    GOLD_CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD:-gold_pass_2024}
    GOLD_CLICKHOUSE_DB: ${CLICKHOUSE_DB:-fashion_gold}
    # Kafka Configuration
    KAFKA_BOOTSTRAP_SERVERS: broker:29092
  volumes:
    - ./airflow/dags:/opt/airflow/dags:rw,Z
    - ./airflow/logs:/opt/airflow/logs:rw,Z
    - ./airflow/plugins:/opt/airflow/plugins:rw,Z
    - ./scripts:/opt/scripts:ro,Z
    - ./data:/opt/data:rw,Z
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on: &airflow-common-depends-on
    postgres:
      condition: service_healthy
    data-postgres:
      condition: service_healthy
    redis:
      condition: service_healthy
    minio:
      condition: service_healthy
    clickhouse:
      condition: service_healthy
  restart: unless-stopped
  healthcheck:
    test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
    interval: 30s
    timeout: 10s
    retries: 3
    start_period: 30s
  networks:
    - fashion-network

services:
  # ===========================================
  # INGESTION LAYER - Real-time Data Collection
  # ===========================================
  
  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: fashion-zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-logs:/var/lib/zookeeper/log
    healthcheck:
      test: ["CMD", "bash", "-c", "echo 'ruok' | nc localhost 2181"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    networks:
      - fashion-network

  # Kafka Broker
  broker:
    image: confluentinc/cp-server:7.4.0
    hostname: broker
    container_name: fashion-broker
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker:29092
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'true'
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'
    volumes:
      - kafka-data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped
    networks:
      - fashion-network

  # Initialize Kafka topics on startup
  kafka-setup:
    image: confluentinc/cp-kafka:7.4.0
    container_name: fashion-kafka-setup
    depends_on:
      broker:
        condition: service_healthy
    command: |
      bash -c "
      echo 'Waiting for Kafka broker to be ready...';
      while ! nc -z broker 29092; do sleep 1; done;
      echo 'Creating fashion ingestion topics (Raw Data → Bronze Layer)...';
      
      # Raw data ingestion topics - API → Kafka → MinIO (Bronze)
      kafka-topics --create --if-not-exists --bootstrap-server broker:29092 --topic raw-joor-orders --partitions 3 --replication-factor 1 --config retention.ms=604800000;
      kafka-topics --create --if-not-exists --bootstrap-server broker:29092 --topic raw-shopify-orders --partitions 3 --replication-factor 1 --config retention.ms=604800000;
      kafka-topics --create --if-not-exists --bootstrap-server broker:29092 --topic raw-tiktok-orders --partitions 3 --replication-factor 1 --config retention.ms=604800000;
      kafka-topics --create --if-not-exists --bootstrap-server broker:29092 --topic raw-freight-data --partitions 3 --replication-factor 1 --config retention.ms=604800000;
      kafka-topics --create --if-not-exists --bootstrap-server broker:29092 --topic raw-gsheets-data --partitions 2 --replication-factor 1 --config retention.ms=604800000;

      # Master data topics (compacted for latest state)
      kafka-topics --create --if-not-exists --bootstrap-server broker:29092 --topic master-products --partitions 1 --replication-factor 1 --config cleanup.policy=compact;
      kafka-topics --create --if-not-exists --bootstrap-server broker:29092 --topic master-buyers --partitions 1 --replication-factor 1 --config cleanup.policy=compact;

      # Data quality and monitoring topics
      kafka-topics --create --if-not-exists --bootstrap-server broker:29092 --topic data-quality-alerts --partitions 1 --replication-factor 1 --config retention.ms=2592000000;
      kafka-topics --create --if-not-exists --bootstrap-server broker:29092 --topic pipeline-metrics --partitions 1 --replication-factor 1 --config retention.ms=1209600000;

      echo 'Fashion topics created successfully!';
      echo 'Data Flow: APIs → Kafka → MinIO (Bronze) → Spark → PostgreSQL (Silver) → Spark → ClickHouse (Gold)';
      echo 'Available topics:';
      kafka-topics --list --bootstrap-server broker:29092;
      echo 'Kafka setup complete!';
      "
    networks:
      - fashion-network

  # Schema Registry for data governance
  schema-registry:
    image: confluentinc/cp-schema-registry:7.4.0
    hostname: schema-registry
    container_name: fashion-schema-registry
    depends_on:
      broker:
        condition: service_healthy
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker:29092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/subjects"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - fashion-network

  # Kafka UI for monitoring
  kafka-ui:
    image: provectuslabs/kafka-ui:v0.7.2
    container_name: fashion-kafka-ui
    depends_on:
      broker:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: fashion-cluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: broker:29092
      KAFKA_CLUSTERS_0_JMXPORT: 9101
      KAFKA_CLUSTERS_0_SCHEMAREGISTRY: http://schema-registry:8081
      DYNAMIC_CONFIG_ENABLED: true
    restart: unless-stopped
    networks:
      - fashion-network
  
  kafka-producer-service:
    build:
      context: .
      dockerfile: Dockerfile.kafka-producer
    container_name: fashion-kafka-producer-service
    environment:
      SILVER_DB_HOST: data-postgres
      SILVER_DB_PORT: 5432
      SILVER_DB_NAME: ${SILVER_DB_NAME:-fashion_silver}
      SILVER_DB_USER: ${SILVER_DB_USER:-silver_user}
      SILVER_DB_PASSWORD: ${SILVER_DB_PASSWORD:-silver_pass_2024}
      KAFKA_BOOTSTRAP_SERVERS: broker:29092
    depends_on:
      data-postgres:
        condition: service_healthy
      broker:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - fashion-network

  kafka-consumer-service:
    build:
      context: .
      dockerfile: Dockerfile.kafka-consumer
    container_name: fashion-kafka-consumer-service
    environment:
      KAFKA_BOOTSTRAP_SERVERS: broker:29092
      MINIO_HOST: minio:9000
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY:-bronze_access_key}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY:-bronze_secret_key_2024}
    depends_on:
      broker:
        condition: service_healthy
      minio:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - fashion-network

  # ===========================================
  # BRONZE LAYER - Raw Data Storage (MinIO)
  # ===========================================
  minio:
    image: minio/minio:RELEASE.2024-06-13T22-53-53Z
    container_name: fashion-minio-bronze
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY:-bronze_access_key}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY:-bronze_secret_key_2024}
      MINIO_BROWSER_REDIRECT_URL: http://localhost:9001
    ports:
      - "9000:9000"  # MinIO API
      - "9001:9001"  # MinIO Console
    volumes:
      - minio-data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - fashion-network

  # MinIO bucket initialization
  minio-setup:
    image: minio/mc:RELEASE.2024-06-12T14-34-03Z
    container_name: fashion-minio-setup
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set minio http://minio:9000 ${MINIO_ACCESS_KEY:-bronze_access_key} ${MINIO_SECRET_KEY:-bronze_secret_key_2024};
      /usr/bin/mc mb minio/fashion-bronze-raw || true;
      /usr/bin/mc mb minio/fashion-bronze-processed || true;
      /usr/bin/mc mb minio/fashion-bronze-archive || true;
      echo 'MinIO buckets created successfully!';
      exit 0;
      "
    networks:
      - fashion-network

  # ===========================================
  # SILVER LAYER - Cleaned Data (PostgreSQL)
  # ===========================================
  data-postgres:
    image: postgres:15.3
    container_name: fashion-postgres-silver
    environment:
      POSTGRES_USER: ${SILVER_DB_USER:-silver_user}
      POSTGRES_PASSWORD: ${SILVER_DB_PASSWORD:-silver_pass_2024}
      POSTGRES_DB: ${SILVER_DB_NAME:-fashion_silver}
      POSTGRES_HOST_AUTH_METHOD: md5
    ports:
      - "5433:5432"
    command: >
      postgres -c listen_addresses='*'
               -c max_connections=200
               -c shared_buffers=256MB
               -c effective_cache_size=1GB
               -c work_mem=4MB
               -c maintenance_work_mem=64MB
               -c checkpoint_completion_target=0.9
               -c wal_buffers=16MB
               -c default_statistics_target=100
    volumes:
      - data-postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${SILVER_DB_USER:-silver_user}"]
      interval: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    networks:
      - fashion-network

  # ===========================================
  # GOLD LAYER - Analytics Data (ClickHouse)
  # ===========================================
  clickhouse:
    image: clickhouse/clickhouse-server:24.1.8.22
    container_name: fashion-clickhouse-gold
    environment:
      CLICKHOUSE_DB: ${CLICKHOUSE_DB:-fashion_gold}
      CLICKHOUSE_USER: ${CLICKHOUSE_USER:-gold_user}
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD:-gold_pass_2024}
      CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: 1
    ports:
      - "8123:8123"  # HTTP interface for Power BI
      - "9440:9440"  # Secure native TCP
    volumes:
      - clickhouse-data:/var/lib/clickhouse
      - clickhouse-logs:/var/log/clickhouse-server
    ulimits:
      nofile:
        soft: 262144
        hard: 262144
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8123/ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - fashion-network

  # ===========================================
  # PROCESSING LAYER - Apache Spark
  # ===========================================
  
  # Spark Master - for Bronze→Silver→Gold transformations
  spark-master:
    build:
      context: .
      dockerfile: Dockerfile.spark-s3a
    hostname: spark-master
    container_name: fashion-spark-master
    ports:
      - "8082:8080"    # Spark Master Web UI
      - "7077:7077"    # Spark Master port
      - "6066:6066"    # Spark Master REST port
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      - SPARK_USER=spark
      - SPARK_MASTER_OPTS=-Dspark.deploy.defaultCores=2
    volumes:
      - ./spark-apps:/opt/spark-apps
      - ./spark-data:/opt/spark-data
      - ./spark-logs:/opt/spark/logs
      - ./jars:/opt/spark/jars/extra
    healthcheck:
      test: ["CMD-SHELL", "pgrep -f 'org.apache.spark.deploy.master.Master' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - fashion-network
    restart: unless-stopped

  # Spark Worker 1
  spark-worker-1:
    build:
      context: .
      dockerfile: Dockerfile.spark-s3a
    hostname: spark-worker-1
    container_name: fashion-spark-worker-1
    ports:
      - "8083:8081"    # Worker Web UI
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=2G
      - SPARK_WORKER_CORES=2
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      - SPARK_USER=spark
      - SPARK_WORKER_OPTS=-Dspark.worker.cleanup.enabled=true
    volumes:
      - ./spark-apps:/opt/spark-apps
      - ./spark-data:/opt/spark-data
      - ./spark-logs:/opt/spark/logs
      - ./jars:/opt/spark/jars/extra
    depends_on:
      spark-master:
        condition: service_healthy
    networks:
      - fashion-network
    restart: unless-stopped

  # Spark Worker 2
  spark-worker-2:
    build:
      context: .
      dockerfile: Dockerfile.spark-s3a
    hostname: spark-worker-2
    container_name: fashion-spark-worker-2
    ports:
      - "8084:8081"    # Worker Web UI
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=2G
      - SPARK_WORKER_CORES=2
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      - SPARK_USER=spark
      - SPARK_WORKER_OPTS=-Dspark.worker.cleanup.enabled=true
    volumes:
      - ./spark-apps:/opt/spark-apps
      - ./spark-data:/opt/spark-data
      - ./spark-logs:/opt/spark/logs
      - ./jars:/opt/spark/jars/extra
    depends_on:
      spark-master:
        condition: service_healthy
    networks:
      - fashion-network
    restart: unless-stopped

  # ===========================================
  # ORCHESTRATION LAYER - Apache Airflow
  # ===========================================
  
  # Airflow Postgres Database
  postgres:
    image: postgres:15.7
    container_name: fashion-airflow-postgres
    environment:
      POSTGRES_USER: ${AIRFLOW_DB_USER:-airflow}
      POSTGRES_PASSWORD: ${AIRFLOW_DB_PASSWORD:-airflow}
      POSTGRES_DB: ${AIRFLOW_DB_NAME:-airflow}
      POSTGRES_HOST_AUTH_METHOD: md5
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${AIRFLOW_DB_USER:-airflow}"]
      interval: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    networks:
      - fashion-network

  # Redis for Airflow Celery
  redis:
    image: redis:7.2.5-alpine
    container_name: fashion-redis
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    networks:
      - fashion-network

  # Airflow Webserver
  airflow-webserver:
    <<: *airflow-common
    container_name: fashion-airflow-webserver
    command: webserver
    ports:
      - "8085:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped

  # Airflow Scheduler
  airflow-scheduler:
    <<: *airflow-common
    container_name: fashion-airflow-scheduler
    command: scheduler
    restart: unless-stopped

  # Airflow Worker
  airflow-worker:
    <<: *airflow-common
    container_name: fashion-airflow-worker
    command: celery worker
    restart: unless-stopped

  # Airflow Init
  airflow-init:
    <<: *airflow-common
    container_name: fashion-airflow-init
    command: version
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${AIRFLOW_WWW_USER_USERNAME:-admin}
      _AIRFLOW_WWW_USER_PASSWORD: ${AIRFLOW_WWW_USER_PASSWORD:-admin_password_2024}
    restart: "no"

  # ===========================================
  # API & DATA GENERATION LAYER
  # ===========================================
  
  # Fashion Data API Server
  fashion-api:
    build:
      context: .
      dockerfile: Dockerfile.fashion-api
    container_name: fashion-api
    environment:
      # Silver Layer Database
      SILVER_DB_HOST: data-postgres
      SILVER_DB_PORT: 5432
      SILVER_DB_NAME: ${SILVER_DB_NAME:-fashion_silver}
      SILVER_DB_USER: ${SILVER_DB_USER:-silver_user}
      SILVER_DB_PASSWORD: ${SILVER_DB_PASSWORD:-silver_pass_2024}
      # Bronze Layer Storage
      BRONZE_MINIO_HOST: minio
      BRONZE_MINIO_PORT: 9000
      BRONZE_MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY:-bronze_access_key}
      BRONZE_MINIO_SECRET_KEY: ${MINIO_SECRET_KEY:-bronze_secret_key_2024}
      # Gold Layer Analytics
      GOLD_CLICKHOUSE_HOST: clickhouse
      GOLD_CLICKHOUSE_PORT: 8123
      GOLD_CLICKHOUSE_USER: ${CLICKHOUSE_USER:-gold_user}
      GOLD_CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD:-gold_pass_2024}
      GOLD_CLICKHOUSE_DB: ${CLICKHOUSE_DB:-fashion_gold}
    ports:
      - "5000:5000"
    depends_on:
      data-postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
      clickhouse:
        condition: service_healthy
    networks:
      - fashion-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Fashion Data Generator
  fashion-data-generator:
    build:
      context: .
      dockerfile: Dockerfile.raw-data-generator
    container_name: fashion-raw-data-generator
    environment:
      # Silver Layer Database
      SILVER_DB_HOST: data-postgres
      SILVER_DB_PORT: 5432
      SILVER_DB_NAME: ${SILVER_DB_NAME:-fashion_silver}
      SILVER_DB_USER: ${SILVER_DB_USER:-silver_user}
      SILVER_DB_PASSWORD: ${SILVER_DB_PASSWORD:-silver_pass_2024}
      RUN_CONTINUOUSLY: 'true'
      INTERVAL_SECONDS: 30
    depends_on:
      data-postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - fashion-network

  all-sources-streaming:
    build:
      context: .
      dockerfile: Dockerfile.all-sources-streaming
    container_name: fashion-all-sources-streaming
    depends_on:
    spark-master:
      condition: service_healthy
    data-postgres:
      condition: service_healthy
    minio:
      condition: service_healthy
    volumes:
      - ./spark-data:/opt/spark-data
      - ./jars:/opt/spark/jars/extra
    restart: unless-stopped
    networks:
      - fashion-network

volumes:
  # Data Layer Volumes
  data-postgres-db-volume:
  clickhouse-data:
  clickhouse-logs:
  minio-data:
  
  # Streaming Layer Volumes
  kafka-data:
  zookeeper-data:
  zookeeper-logs:
  
  # Orchestration Layer Volumes
  postgres-db-volume:
  redis-data:
  
  # Processing Layer Volumes
  spark-data:
  spark-logs:

networks:
  fashion-network:
    name: fashion-custom-network
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16